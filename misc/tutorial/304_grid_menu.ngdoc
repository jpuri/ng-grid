@ngdoc overview
@name Tutorial: 304 Grid Menu
@description The grid menu can be enabled through setting the gridOption `enableGridMenu`.  This 
adds a settings icon in the top right of the grid, which floats above the column header.  The
menu by default gives access to show/hide columns, but can be customised to show additional
actions.  

The exporter feature also adds menu items to this menu.  The `exporterMenuCsv` option is set
to false, which suppresses csv export.  The 'export selected rows' option is only available
if at least one row is selected.

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ui.grid', 'ui.grid.exporter', 'ui.grid.selection']);

    app.controller('MainCtrl', ['$scope', '$http', '$interval', function ($scope, $http, $interval) {
      $scope.gridOptions = {
        exporterMenuCsvExport: false,
        enableGridMenu: true,
        gridMenuCustomItems: [
          {
            title: 'Rotate Grid',
            action: function ($event) {
              this.grid.element.toggleClass('rotated');
            }
          }
        ],
        onRegisterApi: function( gridApi ){
          $scope.gridApi = gridApi;
          $interval( function() {
            gridApi.core.addToGridMenu( gridApi.grid, [{ title: 'Dynamic item'}]);
          }, 0, 1);
        }
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div id="grid1" ui-grid="gridOptions" ui-grid-exporter ui-grid-selection class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 400px;
    }

    .my-custom-menu {
      position: absolute;
    }

    .my-custom-menu .ui-grid-menu {
      padding: 0px;
    }

    .my-custom-menu .ui-grid-menu-inner {
      -webkit-box-shadow: none;
      box-shadow: none;
    }

    .rotated {
      transform: rotate(180deg);
      -webkit-transform: rotate(180deg);
      -ms-transform: rotate(180deg);
      -moz-transform: rotate(180deg);
      -o-transform: rotate(180deg);
    }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    describe('grid menu', function() {
      it('grid1 should have three visible columns', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
      });

      it('grid1 grid menu should have 10 items', function () {
        gridTestUtils.expectVisibleGridMenuItems( 'grid1', 10 );
      });
      
      it('grid1 hide then show gender column', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, 'Gender' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 2, 'Company' );

        gridTestUtils.clickGridMenuItem( 'grid1', 11 );  // there are some hidden menu items, this is gender_hide
        gridTestUtils.expectHeaderColumnCount( 'grid1', 2 );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, 'Company' );

        gridTestUtils.clickGridMenuItem( 'grid1', 12 );  // there are some hidden menu items, this is gender_show
        gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, 'Gender' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 2, 'Company' );
      });
    });

  </file>   
</example>