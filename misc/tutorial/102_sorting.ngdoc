@ngdoc overview
@name Tutorial: 102 Sorting
@description

UI-Grid allows you to sort rows. The feature is on by default. You can set the `enableSorting` flag in your grid options to enable/disable it.

<span class="span8 alert alert-warning">
  <strong>Note:</strong> You can sort columns by accessing the column menu. You must include ngAnimate in your application if you want the menu to slide up/down, but it's not required.
</span>

Sorting can be disabled at the column level by setting `enableSorting: false` in the column def. See the last column below for an example.

Multiple columns can be sorted by shift-clicking on the 2-n columns.  To see it in action, sort Gender then shift-click Name.

<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', function ($scope, $http) {
      $scope.gridOptions = {
        enableSorting: true,
        columnDefs: [
          { field: 'name' },
          { field: 'gender' },
          { field: 'company', enableSorting: false }
        ]
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      Click on a column header to sort by that column. (The third column has sorting disabled.)
      <br>
      <br>
      <div id="grid1" ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 200px;
    }
  </file>
</example>

<h1 id="inital-sort">Initial Sort State</h1>

You can set an initial sort state for the grid by defining the `sort` property on your column definitions. The `direction` sub-property says which way to sort, and the `priority` says what order to sort the columns in (lower priority gets sorted first).

<example module="app2">
  <file name="app2.js">
    var app = angular.module('app2', ['ngAnimate', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', function ($scope, $http) {
      $scope.gridOptions = {
        enableSorting: true,
        columnDefs: [
          {
            field: 'name',
            sort: {
              direction: 'desc',
              priority: 1
            }
          },
          {
            field: 'gender',
            sort: {
              direction: 'asc',
              priority: 0
            }
          },
          { field: 'company', enableSorting: false  }
        ]
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index2.html">
    <div ng-controller="MainCtrl">
      <div id="grid2" ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main2.css">
    .grid {
      width: 500px;
      height: 200px;
    }
  </file>
  
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    
    describe('first grid on the page, no default sort', function() {
      it('grid should have three visible columns', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
      });
  
      it('header values should be as expected', function () {
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, 'Gender' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 2, 'Company' );
      });
  
      it('grid should be unsorted by default', function () {
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Ethel Price' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Claudine Neal' );
      });

      it('sort by name by clicking header', function () {
        gridTestUtils.clickHeaderCell( 'grid1', 0 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Alexander Foley' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Alisha Myers' );
      });

      it('reverse sort by name by clicking header', function () {
        gridTestUtils.clickHeaderCell( 'grid1', 0 );
        gridTestUtils.clickHeaderCell( 'grid1', 0 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Yvonne Parsons' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Woods Key' );
      });
      
      it('return to original sort by name by clicking header', function () {
        gridTestUtils.clickHeaderCell( 'grid1', 0 );
        gridTestUtils.clickHeaderCell( 'grid1', 0 );
        gridTestUtils.clickHeaderCell( 'grid1', 0 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Ethel Price' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Claudine Neal' );
      });
      
      it('sort asc by clicking menu', function() {
        gridTestUtils.clickColumnMenuSortAsc( 'grid1', 0 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Alexander Foley' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Alisha Myers' );        
      });

      it('sort desc by clicking menu, then remove sort', function() {
        gridTestUtils.clickColumnMenuSortDesc( 'grid1', 0 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Yvonne Parsons' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Woods Key' );

        gridTestUtils.clickColumnMenuRemoveSort( 'grid1', 0 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Ethel Price' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Claudine Neal' );
      });
      
      it('sort two columns, gender then name, by shift clicking', function() {
        gridTestUtils.clickHeaderCell( 'grid1', 1 );
        gridTestUtils.shiftClickHeaderCell( 'grid1', 0 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Alisha Myers' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Beryl Rice' );
      });

      it('sort disabled on last column', function() {
        gridTestUtils.clickHeaderCell( 'grid1', 2 );
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 0, 'Ethel Price' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 0, 'Claudine Neal' );
      });
    });


    describe('second grid on the page, has default sort', function() {
      it('grid should have three visible columns', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid2', 3 );
      });
  
      it('header values should be as expected', function () {
        gridTestUtils.expectHeaderCellValueMatch( 'grid2', 0, 'Name' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid2', 1, 'Gender' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid2', 2, 'Company' );
      });
  
      it('grid should be sorted by default', function () {
        gridTestUtils.expectCellValueMatch( 'grid2', 0, 0, 'Yvonne Parsons' );
        gridTestUtils.expectCellValueMatch( 'grid2', 1, 0, 'Velma Fry' );
      });
    });

  </file>  
</example>